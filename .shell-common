# --
# aliases, functions, and shell tool setup that isn't shell specific
# --

# -- aliases -------------------------------------------------------

alias ibrew="arch -x86_64 /usr/local/bin/brew"
alias mbrew="arch -arm64 /opt/homebrew/bin/brew"

# lots lifted/transformed from https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/singlechar

alias y='rg -il'  # List files matching ripgrep search
alias n='rg -ilv' # Inverse of y

alias w='echo >'  # Write args to file
alias a='echo >>' # Append args to file
alias w:='cat >'  # Write STDIN to file
alias a:='cat >>' # Append STDIN to file

# cd to interactively fuzzy search frequent directory
alias D='cd "$(fasd -dl | fzf --tac +m)"'

# cd to interactively fuzzy search subdirectory
alias Ds='cd "$(fd --type d | fzf)"'

# cd to GOPATH
alias gopath="cd "$GOPATH""

alias F="git fetch --prune"
alias R='cd "$(git rev-parse --show-toplevel)"'
alias b="git b --color | bat --plain"
alias d="git di"
alias s="git status"

alias be="bundle exec"

# preview files
alias f.="fzf --ansi --preview-window 'right:60%' --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

# read files
alias b.='f. | read -r f && bat "$f"'
alias g.='f. | read -r f && glow "$f"'

# vim files
alias v.='f. | read -r f && vim "$f"'
alias vs='vim -S /tmp/vim-session'
alias rgv=ripgrep-to-vim
alias rtv=ripgrep-to-vim

# cd directories
alias f.c='f. | read -r f && cd "$(dirname "$f")"'

alias fde='fd --extension'

# -- functions -----------------------------------------------------

# like pgrep but more
pg() {
	[[ $# -ne 1 ]] && echo "p PATTERN" && return
	pgrep -f "$1" | xargs ps
}

# terminal title
T() {
	local _current_directory=$(basename $(pwd))
	local _title=${1:-$_current_directory}
	print -Pn "\e]1;$_title:q\a"
}

# direnv
command -v direnv >&/dev/null && eval "$(direnv hook zsh)"

# exa
if command -v exa >/dev/null; then
	alias ls=exa
	alias la="exa --long -bhm --time-style=long-iso"
	alias lg="exa -lah --git --time-style=long-iso"
	alias tree="exa --tree"
fi

# create and open a new directory
# with special handling of github clones
function mkd() {
  if [[ $# -eq 1 ]] && [[ $1 == "git@github.com"* ]] && [[ $1 == *".git" ]]; then
    dir=$(echo "$1" | awk -F: '{print $2}' | awk -F/ '{print $1}')
  else
    dir=$*
  fi
  mkdir -p "$dir" && cd "$dir" || exit 1
}


# size a file for a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# all the info that dig can find
function digdug() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# empty a file and tail it
cleartail() {
	echo "" >"$1"
	clear
	tail -f "$1"
}

weather() {
	curl -s http://wttr.in/$1
}

app-tree-imgcat() {
	mix app.tree --format dot &>/dev/null && dot -Tpng app_tree.dot |
		imgcat
	rm -f app_tree.dot
}
deps-tree-imgcat() {
	mix deps.tree --format dot &>/dev/null && dot -Tpng deps_tree.dot |
		imgcat
	rm -f app_tree.dot
}

man() {
	LESS_TERMCAP_mb=$'\e'"[1;31m" \
		LESS_TERMCAP_md=$'\e'"[1;31m" \
		LESS_TERMCAP_me=$'\e'"[0m" \
		LESS_TERMCAP_se=$'\e'"[0m" \
		LESS_TERMCAP_so=$'\e'"[1;44;33m" \
		LESS_TERMCAP_ue=$'\e'"[0m" \
		LESS_TERMCAP_us=$'\e'"[1;32m" \
		command man "$@"
}

marked() {
	if [ $1 ]; then
		open -a "Marked 2" $1
	else
		open -a "Marked 2"
	fi
}

readme() {
	_readme=$(fd readme -d 1)
	if command -v glow 2>/dev/null 1>/dev/null; then
		glow "$_readme"
	else
		less "$_readme"
	fi
}

recent() {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
		branch=$(echo "$branches" |
			fzf-tmux -d $((2 + $(wc -l <<<"$branches"))) +m) &&
		git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

remote() {
	git fetch
	local branches branch
	branches=$(git branch --remote | grep -v HEAD) &&
		branch=$(echo "$branches" |
			fzf-tmux -d $((2 + $(wc -l <<<"$branches"))) +m) &&
		git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# -- from https://github.com/erichs
pb() {
	# 'clipboard DWIM tool'
	# example 'pb  # paste'
	# example 'echo hi | pb  # copy'
	# example 'echo hi | pb | cat -  # copy and paste'
	# example 'pb </tmp/file  # copy'
	# example 'pb >/tmp/file  # paste'
	# example 'pb </tmp/file1 >/tmp/file2  # copy and paste'
	if [[ -p /dev/stdin ]]; then
		pbcopy
	fi
	if [[ ! -t 0 && ! -p /dev/stdin ]]; then
		pbcopy
	fi
	if [[ -t 1 ]]; then
		if [[ -t 0 ]]; then
			pbpaste
		fi
	fi
	if [[ -p /dev/stdout ]]; then
		pbpaste
	fi
	if [[ ! -t 1 && ! -p /dev/stdout ]]; then
		pbpaste
	fi
}

pbvim() {
	local _pbfile=/var/tmp/pbvim
	pbpaste >$_pbfile
	vim -b $_pbfile
	pbcopy <$_pbfile
	rm $_pbfile
}

b16() {
	theme=$(for file in $HOME/.config/base16-shell/scripts/base16*.sh; do basename $file | cut -d '.' -f 1 | sed -e 's/-/_/'; done | fzf --tac --no-sort --cycle --no-multi --header "Current theme: $BASE16_THEME")
	eval "$theme"
}

regex() {
	command rg --debug "$*" "" 2>&1 | sed -e '/DEBUG/d' -e '/No such file/d' -e '/No files were searched/d'
}

sleep-screen() {
	pmset displaysleepnow
}

lock-system() {
	"/System/Library/CoreServices/Menu Extras/User.menu/Contents/Resources/CGSession" -suspend
}

npm-package() {
	jq ".$2" ~/.npm/$1/*/package/package.json | tail -1
}

npm-dependencies() {
	jq -r '.dependencies | keys[]' package.json | while read package; do echo $package}$(npm-package $package description | cut -c1-100)}$(npm-package $package homepage); done | column -s '}' -t | less -niSFX
}

npm-dev-dependencies() {
	jq -r '.devDependencies | keys[]' package.json | while read package; do echo $package}$(npm-package $package description | cut -c1-100)}$(npm-package $package homepage); done | column -s '}' -t | less -niSFX
}

external-ip-address() {
	curl -s https://api.duckduckgo.com/\?q=ip+address\&format=json | jq -r .Answer
}

random-md5() {
	ruby -r faker -e "puts Faker::Crypto.md5"
}

random-sha1() {
	ruby -r faker -e "puts Faker::Crypto.sha1"
}

random-sha256() {
	ruby -r faker -e "puts Faker::Crypto.sha256"
}

ht() {
	head $*
	echo ".\n.\n.\n."
	tail $*
}

ww() {
	if type lww &>/dev/null; then
		lww
	fi
	echo
	echo 'PWD'
	pwd
	echo
	echo 'GIT STATUS'
	git status -bs
	echo
}

check-for-fit-fdescribe() {
	rg '\bf(it|describe)\(.*\{' -t js -q &>/dev/null && echo "(f) "
}

check-for-dirty-working-tree() {
	[[ -z $(git --no-optional-locks status -s) ]] || echo "(c) "
}

prompt-tags() {
	echo "$(check-for-fit-fdescribe)$(check-for-dirty-working-tree)"
}

current-git-checkout() {
	git --no-optional-locks status | head -1 | sed -e 's/On branch //'
}

cf() {
	rg -i '\bf(it|describe)\b.*\{' -t js
}

check_letter() {
	echo "$1: $(type $1 >/dev/null && type $1 | sed -e \"s/^$1: //\" | tr '\n' ' ')"
}

letters() {
	for letter in {a..z}; do
		check_letter $letter
		check_letter $(echo $letter | tr a-z A-Z)
	done
}

h() {
	highlight $1 -O rtf | pb
}

monitor-memory() {
	mkdir -p ~/.memory_logs
	local _name=$(echo $1 | tr ' ' '-')
	echo "TIME VSZ RSS"
	while true; do
		pgrep -f $1 | while read _pid; do
			if [[ ! -z $_pid ]]; then
				echo "$(date +%s) $(ps -o vsz,rss $_pid | rg -v 'VSZ')" | tee -a ~/.memory_logs/"memory-$_name-$_pid.log"
			else
				(echo >&2 "process not found")
			fi
		done
		sleep 5
	done
}

slacklet() {
	emojilet $1 $2 | sed -e 's/ /:blank:/g'
}

emojilet() {
	figlet -f banner $1 | sed -e "s/#/$2/g"
}

# from @chorn
keychain-environment-variable() {
	security find-generic-password -w -a "${USER}" -D ENV -s "${1}"
}

set-keychain-environment-variable() {
	[[ -z "$1" ]] && return 1
	read -r -s "?Enter Value for ${1}: " secret
	[[ -z "$secret" ]] && return 1
	security add-generic-password -U -a "${USER}" -D ENV -s "${1}" -w "${secret}"
}

ps_owners() {
	[[ -n "${BASH_VERSINFO[0]}" && "${BASH_VERSINFO[0]}" -lt 4 ]] && return 1
	[[ -n "${BASH_VERSINFO[1]}" && "${BASH_VERSINFO[1]}" -lt 4 ]] && return 1

	local _pid="${1:-$$}"

	[[ $_pid -eq 0 ]] && return

	read -r _uid _user _ppid _command < <(ps -o uid=,user=,ppid=,command= -p "$_pid")

	echo "$_pid $_user $_uid $_ppid \"$_command\""

	ps_owners "$_ppid"
}

am_i_someone_else() {
	[[ -n "${BASH_VERSINFO[0]}" && "${BASH_VERSINFO[0]}" -lt 4 ]] && return 1
	[[ -n "${BASH_VERSINFO[1]}" && "${BASH_VERSINFO[1]}" -lt 4 ]] && return 1

	pgrep -u 0 >&/dev/null || return 1
	[[ $EUID -eq 0 ]] && return 1

	local -a _owners
	local -A _counts

	while read -r _pid _user _uid _ppid _command; do
		if [[ -z "${_counts[$_user]}" ]]; then
			_owners+=("$_user")
			_counts[$_user]=1
		else
			((_counts[$_user]++))
		fi
	done < <(ps_owners)

	if [[ "${#_owners[@]}" -le 2 && "${_owners[-1]}" == "root" ]]; then
		return 1
	else
		return 0
	fi
}

ball() {
	clear
	while true; do
		sleep $((RANDOM % 10 + 1))
		echo "$(
			date
			curl 'wttr.in/?T' -s | head -7
		)" | nms -sc
		echo
		echo
		echo
	done
}

stdwhat() {
	($* | sed -e 's/^/STDOUT: /') 2>&1 | sed -e '/STDOUT/! s/^/STDERR: /'
}

# https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
# GIT heart FZF
# -------------

is_in_git_repo() {
	git rev-parse HEAD >/dev/null 2>&1
}

fzf-down() {
	fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

_gf() {
	is_in_git_repo || return
	git -c color.status=always status --short |
		fzf-down -m --ansi --nth 2..,.. \
			--preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
		cut -c4- | sed -e 's/.* -> //'
}

_gb() {
	is_in_git_repo || return
	git branch -a --color=always | grep -v '/HEAD\s' | sort |
		fzf-down --ansi --multi --tac --preview-window right:70% \
			--preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed -e "s/^..//" <<< {} | cut -d" " -f1)' |
		sed 's/^..//' | cut -d' ' -f1 |
		sed 's#^remotes/##'
}

_gt() {
	is_in_git_repo || return
	git tag --sort -version:refname |
		fzf-down --multi --preview-window right:70% \
			--preview 'git show --color=always {}'
}

_gh() {
	is_in_git_repo || return
	git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
		fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
			--header 'Press CTRL-S to toggle sort' \
			--preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
		grep -o "[a-f0-9]\{7,\}"
}

_gr() {
	is_in_git_repo || return
	git remote -v | awk '{print $1 "\t" $2}' | uniq |
		fzf-down --tac \
			--preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
		cut -d$'\t' -f1
}

_gs() {
	is_in_git_repo || return
	git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
		cut -d: -f1
}
