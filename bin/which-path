#!/usr/bin/env bash

set -Eeuo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-p] COMMAND

Prints out your PATHs and highlights the one that includes the given COMMAND.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-p, --pointer   Big arrow pointing to the PATH
EOF
  exit
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  pointer=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    -p | --pointer) pointer=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  [[ ${#args[@]} -eq 0 ]] && die "Missing COMMAND to find, e.g. git"

  return 0
}

paths() {
  echo "$PATH" | tr : "\n"
}

main() {
  local pointer=$1
  local find_this=$2
  local command_path

  if ! command_path=$(command -v "$find_this"); then
    die "$find_this not found in PATHs"
  fi

  if [[ "$pointer" -eq 1 ]]; then
    paths | rg --passthru "($(dirname "$command_path"))" --replace "\$1 <--------- $find_this found here"
  else
    paths | rg --passthru "($(dirname "$command_path"))"
  fi
}

parse_params "$@"
main "${pointer}" "${args[*]}"
